import os
import psycopg2
import random
import time
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
PG_USER = os.getenv("PGUSER", "postgres")
PG_PASS = os.getenv("PGPASSWORD", "231367")
PG_HOST = os.getenv("PGHOST", "localhost")
PG_PORT = int(os.getenv("PGPORT", "5432"))
PG_DB   = os.getenv("PGDATABASE", "ou_analytics")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—Å—Ç–∞–≤–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
INSERT_INTERVAL = 1  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –≤—Å—Ç–∞–≤–∫–∞–º–∏

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é
RECORDS_PER_BATCH_VLE = 5  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 5 –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑
RECORDS_PER_BATCH_ASSESSMENT = 200  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 200 –∑–∞–ø–∏—Å–µ–π –æ—Ü–µ–Ω–æ–∫ –∑–∞ —Ä–∞–∑

def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(
            host=PG_HOST,
            port=PG_PORT,
            dbname=PG_DB,
            user=PG_USER,
            password=PG_PASS
        )
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def fetch_valid_foreign_keys():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    if not conn:
        return None

    try:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        cursor.execute("""
            SELECT DISTINCT id_student 
            FROM studentinfo
            ORDER BY id_student
            LIMIT 1000
        """)
        valid_students = [row[0] for row in cursor.fetchall()]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        cursor.execute("""
            SELECT DISTINCT code_module, code_presentation
            FROM courses
        """)
        valid_modules = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —Å–∞–π—Ç–æ–≤
        cursor.execute("""
            SELECT DISTINCT id_site
            FROM vle
        """)
        valid_sites = [row[0] for row in cursor.fetchall()]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∑–∞–¥–∞–Ω–∏–π
        cursor.execute("""
            SELECT DISTINCT id_assessment
            FROM assessments
        """)
        valid_assessments = [row[0] for row in cursor.fetchall()]
        
        cursor.close()
        return {
            "students": valid_students,
            "modules": valid_modules,
            "sites": valid_sites,
            "assessments": valid_assessments
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        conn.close()

def insert_studentvle_data(valid_keys, num_records=5):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É studentvle"""
    if not valid_keys:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–∞—Ö")
        return 0
    
    conn = get_db_connection()
    if not conn:
        return 0
    
    try:
        cursor = conn.cursor()
        records_inserted = 0
        
        for _ in range(num_records):
            student_id = random.choice(valid_keys["students"])
            module_info = random.choice(valid_keys["modules"])
            code_module, code_presentation = module_info
            site_id = random.choice(valid_keys["sites"])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            date = random.randint(0, 100)  # –î–Ω–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞
            sum_click = random.randint(1, 50)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            cursor.execute("""
                SELECT COUNT(*) 
                FROM studentvle 
                WHERE id_student = %s AND id_site = %s AND code_module = %s 
                AND code_presentation = %s AND date = %s
            """, (student_id, site_id, code_module, code_presentation, date))
            
            count = cursor.fetchone()[0]
            
            if count > 0:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
                cursor.execute("""
                    UPDATE studentvle 
                    SET sum_click = sum_click + %s
                    WHERE id_student = %s AND id_site = %s AND code_module = %s 
                    AND code_presentation = %s AND date = %s
                """, (sum_click, student_id, site_id, code_module, code_presentation, date))
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                cursor.execute("""
                    INSERT INTO studentvle 
                    (code_module, code_presentation, id_site, id_student, date, sum_click)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (code_module, code_presentation, site_id, student_id, date, sum_click))
            
            records_inserted += 1
        
        conn.commit()
        print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ {records_inserted} –∑–∞–ø–∏—Å–µ–π –≤ studentvle")
        return records_inserted
    except Exception as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ studentvle: {e}")
        return 0
    finally:
        conn.close()

def insert_studentassessment_data(valid_keys, num_records=30):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É studentassessment"""
    if not valid_keys:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–∞—Ö")
        return 0
    
    conn = get_db_connection()
    if not conn:
        return 0
    
    try:
        cursor = conn.cursor()
        records_inserted = 0
        records_updated = 0
        
        for _ in range(num_records):
            student_id = random.choice(valid_keys["students"])
            assessment_id = random.choice(valid_keys["assessments"])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
            date_submitted = random.randint(10, 100)  # –î–Ω–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞
            is_banked = random.choice([0, 0, 0, 1])  # –ë–æ–ª—å—à–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 0 (–Ω–µ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞)
            score = round(random.uniform(30.0, 95.0), 1)  # –û—Ü–µ–Ω–∫–∞ –æ—Ç 30 –¥–æ 95
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            cursor.execute("""
                SELECT COUNT(*) 
                FROM studentassessment 
                WHERE id_student = %s AND id_assessment = %s
            """, (student_id, assessment_id))
            
            count = cursor.fetchone()[0]
            
            if count > 0:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
                cursor.execute("""
                    UPDATE studentassessment 
                    SET score = %s, date_submitted = %s
                    WHERE id_student = %s AND id_assessment = %s
                """, (score, date_submitted, student_id, assessment_id))
                records_updated += 1
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                cursor.execute("""
                    INSERT INTO studentassessment 
                    (id_student, id_assessment, date_submitted, is_banked, score)
                    VALUES (%s, %s, %s, %s, %s)
                """, (student_id, assessment_id, date_submitted, is_banked, score))
                records_inserted += 1
        
        conn.commit()
        print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ {records_inserted} –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {records_updated} –≤ studentassessment")
        return records_inserted + records_updated
    except Exception as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ studentassessment: {e}")
        return 0
    finally:
        conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("=" * 80)
    print("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É")
    print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: {INSERT_INTERVAL} —Å–µ–∫—É–Ω–¥")
    print(f"–ó–∞–ø–∏—Å–µ–π VLE –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é: {RECORDS_PER_BATCH_VLE}")
    print(f"–ó–∞–ø–∏—Å–µ–π –æ—Ü–µ–Ω–æ–∫ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é: {RECORDS_PER_BATCH_ASSESSMENT}")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã...")
    valid_keys = fetch_valid_foreign_keys()
    
    if not valid_keys:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–∞—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(valid_keys['students'])} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, "
          f"{len(valid_keys['modules'])} –º–æ–¥—É–ª–µ–π, "
          f"{len(valid_keys['sites'])} —Å–∞–π—Ç–æ–≤, "
          f"{len(valid_keys['assessments'])} –∑–∞–¥–∞–Ω–∏–π")
    print("=" * 80)
    
    total_vle_records = 0
    total_assessment_records = 0
    iteration = 0
    
    try:
        while True:
            iteration += 1
            print(f"\nüìä –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ VLE
            vle_records = insert_studentvle_data(valid_keys, RECORDS_PER_BATCH_VLE)
            total_vle_records += vle_records
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ—Ü–µ–Ω–æ–∫
            assessment_records = insert_studentassessment_data(valid_keys, RECORDS_PER_BATCH_ASSESSMENT)
            total_assessment_records += assessment_records
            
            print(f"üìà –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_vle_records} –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, {total_assessment_records} –æ—Ü–µ–Ω–æ–∫")
            print("-" * 80)
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            time.sleep(INSERT_INTERVAL)
    except KeyboardInterrupt:
        print("\n" + "=" * 80)
        print("‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print(f"üìä –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_vle_records} –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, {total_assessment_records} –æ—Ü–µ–Ω–æ–∫")
        print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {iteration}")
        print("=" * 80)
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")

if __name__ == "__main__":
    main()